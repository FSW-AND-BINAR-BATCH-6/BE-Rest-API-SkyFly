// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleUser {
    BUYER
    ADMIN
}

enum TypeSeat {
    ECONOMY
    BUSINESS
    FIRST
}

enum StatusTicket {
    PENDING // pending
    SUCCESS // settlement
    FAILED // expire
}

enum StatusFlightSeat {
    AVAILABLE // no transaction
    BOOKED // payment success
    OCCUPIED // booked, payment pending
}

model User {
    id                String              @id @default(cuid())
    name              String
    phoneNumber       String?
    familyName        String?
    role              RoleUser            @default(BUYER)
    tickets           Ticket[]
    auth              Auth?
    ticketTransaction TicketTransaction[]
}

model Auth {
    id          String  @id @default(cuid())
    userId      String? @unique
    email       String  @unique
    password    String
    otpToken    String?
    secretToken String?
    isVerified  Boolean @default(false)
    user        User?   @relation(fields: [userId], references: [id])
}

model Airline {
    id     String   @id @default(cuid())
    code   String   @default("ABC-123")
    name   String
    image  String
    flight Flight[]
}

model Airport {
    id                 String   @id @default(cuid())
    name               String
    code               String   @unique
    country            String
    city               String
    departureFlights   Flight[] @relation("DepartureAirport")
    destinationFlights Flight[] @relation("DestinationAirport")
    transitFlights     Flight[] @relation("TransitAirport")
}

model Flight {
    id                      String                    @id @default(cuid())
    planeId                 String
    plane                   Airline                   @relation(fields: [planeId], references: [id])
    departureDate           DateTime
    departureAirportId      String
    departureAirport        Airport                   @relation("DepartureAirport", fields: [departureAirportId], references: [id])
    arrivalDate             DateTime
    destinationAirportId    String
    destinationAirport      Airport                   @relation("DestinationAirport", fields: [destinationAirportId], references: [id])
    transitAirportId        String?
    transitAirport          Airport?                  @relation("TransitAirport", fields: [transitAirportId], references: [id])
    transitArrivalDate      DateTime?
    transitDepartureDate    DateTime?
    capacity                Int
    price                   Float
    discount                Float?
    seats                   FlightSeat[]
    tickets                 Ticket[]
    facilities              String?
    code                    String
    ticketTransactionDetail TicketTransactionDetail[]
}

model FlightSeat {
    id                      String                   @id @default(cuid())
    flightId                String
    flight                  Flight                   @relation(fields: [flightId], references: [id])
    seatNumber              String
    status                  StatusFlightSeat         @default(AVAILABLE)
    type                    TypeSeat
    tickets                 Ticket[]
    TicketTransactionDetail TicketTransactionDetail?
}

model Ticket {
    id                        String                   @id @default(cuid())
    code                      String                   @unique
    flightId                  String?
    flight                    Flight?                  @relation(fields: [flightId], references: [id])
    userId                    String?
    user                      User?                    @relation(fields: [userId], references: [id])
    seatId                    String?                  @unique
    seat                      FlightSeat?              @relation(fields: [seatId], references: [id])
    ticketTransactionId       String?                  @unique
    ticketTransaction         TicketTransaction?       @relation(fields: [ticketTransactionId], references: [id])
    ticketTransactionDetailId String?                  @unique
    ticketTransactionDetail   TicketTransactionDetail? @relation(fields: [ticketTransactionDetailId], references: [id])
}

model TicketTransaction {
    id                 String                    @id @default(cuid())
    orderId            String                    @unique
    totalPrice         Float
    status             String
    bookingDate        DateTime
    User               User?                     @relation(fields: [userId], references: [id])
    userId             String?
    Transaction_Detail TicketTransactionDetail[]
    Ticket             Ticket?
}

model TicketTransactionDetail {
    id             String            @id @default(cuid())
    transactionId  String
    transaction    TicketTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    price          Float
    seatId         String            @unique
    seat           FlightSeat        @relation(fields: [seatId], references: [id])
    name           String
    familyName     String
    dob            DateTime
    citizenship    String
    passport       String
    issuingCountry String
    validityPeriod DateTime
    flightId       String
    flight         Flight?           @relation(fields: [flightId], references: [id])
    Ticket         Ticket?
}
