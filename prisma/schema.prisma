// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleUser {
    BUYER
    ADMIN
}

enum TypeSeat {
    ECONOMY
    BUSINESS
    FIRST
}

enum StatusTicket {
    PENDING
    SUCCESS
    FAILED
}

model User {
    id          String   @id @default(cuid())
    name        String
    phoneNumber String?
    familyName  String? // Optional family name
    role        RoleUser   @default(BUYER) // Default value for role
    tickets     Ticket?
    sessions    Session?
    Auth        Auth?
}

model Session {
    id        String   @id
    userId    String   @unique
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Airplane {
    id     String   @id @default(cuid())
    code   String   @default("ABC-123")
    name   String
    image  String
    flight Flight[]
}

model Flight {
    id                  String       @id @default(cuid())
    planeId             String
    plane               Airplane     @relation(fields: [planeId], references: [id])
    departureDate       DateTime
    departureCity       String
    departureCityCode   String
    arrivalDate         DateTime
    destinationCity     String
    destinationCityCode String
    price               Int
    seats               FlightSeat[]
    tickets             Ticket[]
}

model FlightSeat {
    id         String   @id @default(cuid())
    flightId   String
    flight     Flight   @relation(fields: [flightId], references: [id])
    seatNumber String
    isBooked   Boolean? @default(false)
    type       TypeSeat
    tickets    Ticket?
}

model Ticket {
    id            String       @id @default(cuid())
    code          String       @unique
    flightId      String
    flight        Flight       @relation(fields: [flightId], references: [id])
    customerId    String       @unique
    customer      User         @relation(fields: [customerId], references: [id])
    seatId        String       @unique
    seat          FlightSeat   @relation(fields: [seatId], references: [id])
    bookingDate   DateTime
    price         BigInt
    status        StatusTicket
    tokenMidtrans String?
}

model Auth {
    id          String  @id @default(cuid())
    userId      String? @unique
    email       String  @unique
    password    String
    otpToken    String?
    secretToken String?
    isVerified  Boolean @default(false)
    user        User?   @relation(fields: [userId], references: [id])
}
